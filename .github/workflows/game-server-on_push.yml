# Github Action의 이름 설정
name: CD-workflow

# Action의 Trigger 설정
on:
  push:
    branches: ["main"]

  # 언제든지 수동으로 실행하게 해주는 옵션
  workflow_dispatch:

# 직렬 또는 병렬적으로 실행할 작업의 집합
jobs:
  # 작업의 이름
  build:
    # 작업 실행 환경 이미지 설정
    runs-on: ubuntu-latest

    # 실행할 명령들을 순서에 맞게 나열
    steps:
      # 현재 프로젝트로 작업영역 설정
      - name: Checkout
        uses: actions/checkout@v3

      # Github Action Market에 등록된 Java 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          cache: "gradle"

      # 빌드 명령어 실행
      - run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build

      # CodeDeploy는 압축된 파일만 허용함
      - name: Create ZIP File
        run: zip -qq voteskill-game-server-build.zip build/libs/*.jar appspec.yml scripts/*.sh

      # AWS IAM 권한을 가진 사용자 정보 등록
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # CodeDeploy는 AWS 서비스에서만 자료를 받을 수 있으므로 S3에 빌드파일을 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./voteskill-game-server-build.zip s3://voteskill-s3-game-server/voteskill-game-server-build.zip

      # 마지막으로 CodeDeploy에게 배포 명령을 내리면 끝!
      - name: Deploy to EC2
        run: aws deploy create-deployment
          --application-name voteskill-codedeploy
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name voteskill-game-server
          --s3-location bucket=voteskill-s3-game-server,key=voteskill-game-server-build.zip,bundleType=zip
